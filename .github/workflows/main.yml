name: CI

on:
  push:
  release:
    types: [published]

env:
  KNORA_GDB_LICENSE: ${{ github.workspace }}/ci/graphdb/UNIBAS_DEV_GRAPHDB_SE_latest-31-12-2020_1cores.license
  GRAPHDB_HEAP_SIZE: 4G

jobs:
  test-integration:
    name: JS Lib Test Integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Disk Free
        run: |
          sudo df -i
          sudo df -h
          sudo du -sh /var/lib/docker
          sudo docker system prune --all --force --volumes
          sudo df -h
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - name: cache node_modules artifacts
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: install requirements
        run: sudo apt-get install expect
      - name: run test-integration
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: |
          make npm-install
          make test-ci
  build:
    name: Build package and publish (on release only)
    needs: [test-integration]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm install
          npm run peer-deps
      - name: Test
        run: npm run test
      - name: Prepare dev publication
        run: npm run prepare-dev-publication
      - name: Build
        run: npm run build
      - name: Publish on npm (dry run)
        run: npm publish build/ --access public --dry-run
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN_DASCHBOT}}
      - uses: lakto/gren-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
