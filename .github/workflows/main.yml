name: CI

on:
  push:
  release:
    types: [published]

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Checkout private ci-assets
        uses: actions/checkout@v2
        with:
          repository: dasch-swiss/dsp-ci-assets
          token: ${{ secrets.GitHub_PAT }} # `GitHub_PAT` is a secret that contains the PAT.
          path: ci
      - name: Cache node_modules artifacts
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install requirements
        run: |
          sudo apt-get install expect
          sudo npm install --global @bazel/bazelisk
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: make npm-install
      - name: Get api client test data from knora-api (makefile variant)
        run: make get-test-data-from-release
      - name: Prepare test data
        run: make prepare-test-data
      - name: Run unit tests
        run: make unit-tests
      - name: Build lib
        run: make build
      - name: Prepare test environment
        run: make prepare-test-ci
      - name: Run e2e tests
        run: make e2e-tests

  build:
    name: Build package and publish (on release only)
    needs: [build-test]
    runs-on: ubuntu-latest
    env:
      dist-directory: ./build/
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: Install dependencies
        run: |
          sudo npm install --global @bazel/bazelisk
          npm install
          npm run peer-deps
      - name: Test
        run: npm run test
      - name: Prepare dev publication
        run: npm run prepare-dev-publication
      - name: Build
        run: npm run build
      - if: "github.event.release.prerelease"
        name: Publish pre-release to npm
        run: npm publish ${{env.dist-directory}} --tag rc --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN_DASCHBOT}}
      - if: "!github.event.release.prerelease"
        name: Publish release to npm
        run: npm publish ${{env.dist-directory}} --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN_DASCHBOT}}

  notification:
    name: Google chat notification about release and published version
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}

  publish-docs:
    name: Build and publish API docs
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && !github.event.release.prerelease && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Check out
        uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          npm install
          npm run peer-deps
      - name: Build API docs
        run: |
          npm run typedoc-config
          npm run build-docs
      - name: Publish generated content to GitHub Pages
        uses: tsunematsu21/actions-publish-gh-pages@v1.0.1
        with:
          dir: docs
          branch: gh-pages
          token: ${{ secrets.GH_TOKEN }}
